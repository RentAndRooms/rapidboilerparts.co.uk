<template>
  <CustomerLayout>
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Shopping Cart Preview -->
      <div v-if="cart.length > 0" class="mb-8 bg-white dark:bg-gray-800 rounded-lg shadow p-6">
        <h2 class="text-2xl font-bold mb-4 text-gray-900 dark:text-white">Your Cart</h2>
        <div class="space-y-4">
          <div v-for="item in cart" :key="item.id" class="flex items-center justify-between">
            <div class="flex items-center space-x-4">
              <img :src="item.image" :alt="item.name" class="w-16 h-16 object-cover rounded">
              <div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white">{{ item.name }}</h3>
                <p class="text-gray-500">${{ item.price }}</p>
              </div>
            </div>
            <div class="flex items-center space-x-4">
              <div class="flex items-center space-x-2">
                <button @click="updateQuantity(item.id, item.qty - 1)" class="text-gray-500 hover:text-gray-700">
                  <i class="fas fa-minus"></i>
                </button>
                <span class="text-gray-700 dark:text-gray-300">{{ item.qty }}</span>
                <button @click="updateQuantity(item.id, item.qty + 1)" class="text-gray-500 hover:text-gray-700">
                  <i class="fas fa-plus"></i>
                </button>
              </div>
              <button @click="removeFromCart(item.id)" class="text-red-500 hover:text-red-700">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>
        </div>
        <div class="mt-6 border-t pt-4 flex justify-between items-center">
          <div class="text-lg font-semibold text-gray-900 dark:text-white">
            Total: ${{ cartTotal }}
          </div>
          <button class="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700" @click="checkout">
            Proceed to Checkout
          </button>
        </div>
      </div>

      <!-- Products Grid -->
      <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
        <div v-for="product in products" :key="product.id"
          class="bg-white dark:bg-gray-800 rounded-2xl shadow hover:shadow-lg transition p-4 flex flex-col">
          <img :src="product.image" :alt="product.name" class="rounded-xl object-cover h-48 w-full">

          <div class="mt-4 flex-1">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{{ product.name }}</h3>
            <p class="text-sm text-gray-500 dark:text-gray-400">Brand: {{ product.brand }}</p>
          </div>

          <div class="mt-4 flex items-center justify-between">
            <span class="text-xl font-bold text-indigo-600">${{ product.price }}</span>
            <button class="px-4 py-2 bg-indigo-600 text-white rounded-xl hover:bg-indigo-700 transition"
              @click="addToCart(product)">
              Add to Cart
            </button>
          </div>
        </div>
      </div>
    </div>
  </CustomerLayout>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue';
import CustomerLayout from "@/Layouts/CustomerLayout.vue";
import { Link } from "@inertiajs/vue3";
import AOS from "aos";
import "aos/dist/aos.css";
import { useCart } from '@/composables/useCart';
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";

dayjs.extend(utc);
dayjs.extend(timezone);

const props = defineProps({
  branches: {
    type: Array,
    required: true,
  },
  locals: {
    type: Array,
    required: true,
  },
});

// Initialize cart composable
const { cart, addToCart, removeFromCart, updateQuantity } = useCart();

// Sample products data - replace with your actual data from the backend
const products = ref([
  {
    id: 1,
    name: "Nike Air Max",
    brand: "Nike",
    price: 120,
    image: "https://via.placeholder.com/300x200"
  },
  {
    id: 2,
    name: "Adidas Ultraboost",
    brand: "Adidas",
    price: 140,
    image: "https://via.placeholder.com/300x200"
  },
  // Add more products as needed
]);

// Computed property for cart total
const cartTotal = computed(() => {
  return cart.value.reduce((total, item) => total + (item.price * item.qty), 0);
});

const filteredBranches = ref(props.branches);
const filterLocal = ref([]);
const searchQuery = ref('');
const showDropDown = ref(false);

const floatingItems = ref([
  {
    icon: "fas fa-hamburger",
    class: "top-1/3 right-1/4 animate-float-slower"
  },
  {
    icon: "fas fa-ice-cream",
    class: "bottom-1/4 left-1/3 animate-float"
  },
  {
    icon: "fas fa-coffee",
    class: "top-1/2 right-1/3 animate-float-slow"
  },
  {
    icon: "fas fa-utensils",
    class: "bottom-1/3 right-1/4 animate-float-slower"
  }
]);

function checkout() {
  // Implement checkout logic here
  console.log('Proceeding to checkout with items:', cart.value);
}

function check() {
  showDropDown.value = true;
  filteredBranches.value = props.branches;
  const query = searchQuery.value.toLowerCase();
  filterLocal.value = props.locals.filter((local) =>
    local.name.toLowerCase().includes(query)
  );
}

function getDirectionsUrl(branch) {
  const destination = `${branch.latitude},${branch.longitude}`;
  return `https://www.google.com/maps/dir/?api=1&destination=${destination}`;
}

function isOpen(hours) {
  if (!hours) return false;
  const now = new Date();
  const day = now.toLocaleDateString("en-US", { weekday: "long" });
  const time = now.toLocaleTimeString("en-US", { hour12: false });
  const todayHours = hours.find((h) => h.day === day);
  return todayHours
    ? time >= todayHours.open && time <= todayHours.close
    : false;
}

function formatDistance(distance) {
  if (!distance) return "Distance unknown";
  return `${distance.toFixed(1)} km away`;
}

function formatTime(time) {
  return dayjs(`1970-01-01 ${time}`).tz("Asia/Dhaka").format("hh:mm A");
}

function selectedArea(value) {
  searchQuery.value = value.name;
  showDropDown.value = false;
  console.log(value.division_id);
  if (value.division_id <= 0) {
    console.log(value);
    filteredBranches.value = props.branches.filter(
      (branch) => branch.local_id === value.own_id
    );
  } else {
    filteredBranches.value = props.branches.filter(
      (branch) => branch.thana_id === value.id
    );
  }
}

// Initialize AOS on mount
onMounted(() => {
  AOS.init({
    duration: 1000,
    once: true,
    offset: 50,
    delay: 50,
    easing: "ease-in-out",
  });
});
</script>

<style scoped>
/* Background Grid Pattern */
.bg-grid-pattern {
  background-image: radial-gradient(circle, #ea580c 0.5px, transparent 0.5px);
  background-size: 24px 24px;
}

/* Enhanced Floating Animations */
@keyframes float {
  0%,
  100% {
    transform: translateY(0) rotate(0deg);
    opacity: 0.15;
  }

  50% {
    transform: translateY(-20px) rotate(2deg);
    opacity: 0.2;
  }
}

@keyframes float-slow {
  0%,
  100% {
    transform: translateY(0) rotate(0deg);
    opacity: 0.15;
  }

  50% {
    transform: translateY(-30px) rotate(-2deg);
    opacity: 0.2;
  }
}

@keyframes float-slower {
  0%,
  100% {
    transform: translateY(0) rotate(0deg);
    opacity: 0.15;
  }

  50% {
    transform: translateY(-40px) rotate(3deg);
    opacity: 0.2;
  }
}

.animate-float {
  animation: float 4s cubic-bezier(0.4, 0, 0.2, 1) infinite;
}

.animate-float-slow {
  animation: float-slow 6s cubic-bezier(0.4, 0, 0.2, 1) infinite;
}

.animate-float-slower {
  animation: float-slower 8s cubic-bezier(0.4, 0, 0.2, 1) infinite;
}
</style>
